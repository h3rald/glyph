	txt[
Glyph doesn't require any special control characters like LaTeX, and its macro syntax is very straightforward and liberal. This however comes with a price: because square brackets are used as delimiters, you must escape any square bracket in your text with a backslash. That's not _too_ bad if you think about it, unless you're writing programming code, in which case escaping every single square bracket can be painful.

If a portion of your text contains an excessive amount of square brackets, you may consider using the %>[escape] (or its alias @.@) with the @\[=@ and @=\]@ delimiters. By itself, the escape macro doesn't do anything: it just evaluates to its contents, but the special delimiters act as an escape for any square bracket within them. As a consequence, any macro within @\[=@ and @=\]@ will _not_ be evaluated.

You can use the quoting delimiters with _any_ macro identifier. Obviously, using them as delimiters for things like %>[section]s may not be a good idea, but they should be more or less mandatory with the %>[codeblock] or the %>[highlight], especially when it contains square brackets or even Glyph code, like this:
	]

	highlight[=html|
codeblock\[=
  section[
    @title[A section]
    @id[test]
This is a section.
    section[
    @title[A nested section]
This is another section.
    ]
  ]
\=]
	=]

	note[Although quoting delimiters allow you to use square brackets without escaping them, you must still escape them if you want to escape quoting delimiters themselves.]

	p[Besides square brackets, there are other characters that must or can be escaped with backslashes, as shown in the following table:]

	table[
 		tr[
   		th[Escape Sequence]
   		th[Evaluates to...]
   		th[Notes]
 		]
 		tr[
 			td[code[\\\.\[]]
   		td[code[\[]]
   		td[&[sq_esc]]
  		]
 		tr[
   		td[code[\\\.\]]]
   		td[code[\]]]
   		td[&[sq_esc]]
 		]
 		tr[
   		td[code[\\\\]]
   		td[code[\\]]
   		td[Backslashes do not have to be escaped by default, but an escaped backslash will evaluate to itself.]
 		]
 		tr[
 			td[code[\\\.\=]]
   		td[code[\.=]]
   		td[Equal signs do not have to be escaped by default, but an escaped equal sign will evaluate to iself.]
 		]
 		tr[
   		td[code[\\\.\|]]
   		td[code[\|]]
   		td[Pipes must be escaped (even within quoting macros) unless they are used to separate macro parameters.]
 		]
 		tr[
   		td[code[\\\..]]
   		td[]
   		td[An escaped dot evaluates to nothing. Useful to separate macro identifiers from other characters: br[]code[=_\\\\..=>[#link\|This link is emphasized using Textile]_ =]
    	]
  	]
	]
