section[
txt[So far we examined how to create @<div>@ tags for sections, links, images... but what about lists, tables or paragraphs? How is it possible to create them using Glyphs? You have two possibilities (besides using raw HTML code, that is):
* use a lightweight markup supported by Glyph (currently &[markups])
* rely Glyph's _XML fallback_ feature
]
	@title[Other HTML Elements]
	@id[other_elements]
	section[
		@title[&[markups]]
		p[&[markups] are very easy and intuitive to use, and they can produce HTML markup with almost no effort. Using them with Glyph is as simple as using the %>[textile] (aliased to code[txt]) and the %>[markdown] (aliased to code[md]).]
		box[Example|
			p[The following Glyph code:]
			highlight[=html|
textile[
This is a paragraph with some _emphasized_ text.

This is another paragraph with some -deleted- text.
* This is
* a bulletted
* list
]
			=]
			p[produces the following HTML code:]
			highlight[=html|
<p>This is a paragraph with some <em>emphasized</em> text.</p>
<p>This is a paragraph with some <del>deleted</del> text.</p>
<ul>
  <li>This is</li>
  <li>a bulletted</li>
  <li>list</li>
</ul>
			=]
		]
		important[Be careful when using block-level HTML with Textile and Markdown: sometimes it may be necessary to add extra empty lines or escape tags.]
	]
	section[
		@title[XML Fallback]
		p[Sure Textile and Markdown are great, but sometimes you may want to just use HTML, without the extra verbosity, of course. Take tables for example: Textile offers an easy way to create them, but things may get dirty when you need to have multiple paragraphs or lists within cells.]
		p[Very early versions of Glyph used to offered some simple code[table], code[tr], code[tr], code[td] macros just for that. Of course the problem was that thy didn't offer any way to customize the markup by adding, for example, CSS classes.]
		p[Instead, by default, Glyph can convert any unrecognized macro to the corresponding XML element and macro attributes to XML attributes.]
		box[Example|
			p[&[gcode]]
			highlight[=html|
table[@class[features]
  tr[
		th[ID]
		th[Priority]
		th[Description]
  ]
  tr[
    td[27]
    td[span[@style[color:red;font-weight:bold;] HIGH]]
    td[HTML output]
  ]
  tr[
    td[42]
    td[span[@style[color:green;font-weight:bols;] LOW]]
    td[
      p[Support for less-used tags:]
      ul[
        li[cite]
        li[sup]
        li[...]
      ]
    ]
  ]
]
			=]
			p[&[htmlcode]]
			highlight[=html|
<table class="features">
  <tr>
    <th>ID</th>
    <th>Priority</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>27</td>
    <td><span style="color:red;font-weight:bold;">HIGH</span></td>
    <td>HTML output</td>
  </tr>
  <tr>
    <td>42</td>
    <td><span style="color:green;font-weight:bold;">LOW</span></td>
    <td>
      <p>Support for less-used tags:</p>
      <ul>
        <li>cite</li>
        <li>sup</li>
        <li>...</li>
      </ul>
    </td>
  </tr>
</table>
      =]
		]
		p[Basically, if the $>[language.options.xml_fallback] is set to code[true], any macro unknown to Glyph with at most one parameter will be converted to an XML tag with the same name and any attribute will be converted to the corresponding XML attribute.]
		important[While macro names and attributes are validated so that an error is returned if they contain illegal character, no check is performed against any particular XML schema.]
		txt[Additionally, it is possible to force macro-to-XML conversion by prepending an equal sign to any macro, so for example code[=\.=snippet[test]=] will be converted into @<snippet>test</snippet>@.]
	]
	section[
		@title[Blacklisted XML tags]
		@id[xml_blacklist]
		txt[
By default, the following tags are blacklisted and will be ignored:
%[="* "+Glyph['options.xml_blacklist'].join("\n* ")=]

tip[You can change this list by modifying the $>[language.options.xml_blacklist].]
		]
 
	]
]
