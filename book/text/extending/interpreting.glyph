
	txt[What if you need to evaluate some Glyph code _within_ a macro? Say for example you want to transform a parameter in a link, and you want to make sure that link gets validated exactly like the others, in this case, you can use the @interpret@ method, as follows:]

	highlight[=ruby|
macro :fmi do
  topic, href = @params
  link = placeholder do \|document\| 
    interpret "link[#{href}]"
  end
  %{<span class="fmi">for more information on #{topic}, see #{link}</span>}
end
	=] 

	txt[
When the @interpret@ method is called, the following happens:
# A new Glyph document is created from the @String@ passed to the method.
# The bookmarks, headers and placeholders are passed from the main document to the new one. Because they are stored in arrays and hashes, they are passed by reference, so for example any new bookmark stored in the new document will also become available in the main document.
# Any macro included in the @String@ is evaluated, and the resulting text is returned by the method. Note that this new document does not get finalized: in other words, placeholders will be left as they are, and they'll eventually be replaced when _the main document_ is finalized.
	]

	section[
		@title[Rewriting]
		@id[rewriting]
		p[While the code[interpret] method is useful to evaluate Glyph code in a macro while performing other actions (storing a bookmark, checking for the presence of an anchor, etc.), in some cases it may not be necessary. If you simply want your macro to be converted into existing Glyph macro without performing any action excepting parameter substitution, you can just use the %>[rewrite:] within youy Glyph document]
		p[Consider the following macro definition:]
		highlight[=ruby|
macro :issue do
  interpret %{
    tr[
      td[\.=>[http://github.com/h3rald/glyph/issues/closed#issue/#{param[0]}\|##{param(0)}]]
      td[txt[#{param(1)}]]
    ]
  }
end
		=]
		p[The code[issue] macro is only rewriting existing Glyph code around the two parameters provided. In this case, it is possible to do exactly the same thing using the %>[rewrite:]:]
		highlight[=html|
rewrite:[issue\|
  tr[
    td[\.=>[http://github.com/h3rald/glyph/issues/closed#issue/{{0}}\|#{{0}}]]
    td[txt[{{1}}]]
  ]
]
		=]
		p[Within the %>[rewrite:], it is possible to use a special syntax to call the code[raw_attr] or code[raw_param] methods: br[]
			code[{{]em[parameter_number] or em[attribute_name]code[}}]]
	]
