txt[
As shown in =>[#cmd_tasks_arch], the #>[compile] command calls specific tasks defined in the @generate:@ Rake namespace to generate output files in a particular format.

More specifically, when a @--format@ option is specified, the command looks for a task with the same name within the @generate:@ namespace. This makes adding new output formats to Glyph a fairly easy task, without the need to specify custom commands or similar. 

The following sections explain how the @h3rald@ output format was created to integrate this book into the =>[http://www.h3rald.com|H3RALD.com] website.
]
section[
	@title[Output Configuration]
	txt[
The first step required to add a new output format to Glyph is extending Glyph's configuration by adding the appropriate output hash, as follows:
	]
	highlight[=yaml|
:output: 
  :h3rald: 
    :multifile: true
    :extension: '.html'
    :filter_target: 'html'
    :base: '/glyph/book/'
    :macro_dirs: ['html']
    :layout_dirs: ['web']
    :layouts: 
      :topic: bookpage
      :index: bookindex
	=]
	txt[
In particular, the following keys are mandatory:
* multifile
* extension
* filter_target
* base
* macro_dirs
* layout_dirs
	]
]
section[
	@title[Creating a 'generate:h3rald' task]
	txt[
The next (and final) step involves creating a custom @h3rald@ task within the @generate:@ namespace. This task can be placed in any @.rake@ file within the @lib/tasks@ directory:
	]
	highlight[=ruby|
namespace :generate do
  desc "Create output for h3rald.com integration"
  task :h3rald => [:web] do
    dir = Glyph::PROJECT/'output/h3rald'
    (dir/"glyph/book").mkpath
    # Copy files in subdir
    (dir).find do \|i\|
      if i.file? then
        next if 
          i.to_s.match(Regexp.escape(dir/'glyph')) \|\| 
          i.to_s.match(Regexp.escape(dir/'images')) \|\| 
          i.to_s.match(Regexp.escape(dir/'styles'))
        dest = dir/"glyph/book/#{i.relative_path_from(Glyph::PROJECT/dir)}"
        src = i.to_s
        Pathname.new(dest).parent.mkpath
        file_copy src, dest
      end
    end
    # Remove files
    dir.children.each do \|c\|
      unless [dir/'glyph', dir/'images', dir/'styles'].include? c then
        c.directory? ? c.rmtree : c.unlink
      end
    end
    # Create project page
    project = Glyph.filter "layout:project[@contents[#{file_load(Glyph::PROJECT/'text/introduction.glyph')}]]"
    file_write dir/"glyph.textile", project
  end  
end
	=]
	p[In this case, this task does not actually renders files in a different format, it just moves the files generated by the @generate:web@ task in different subdirectories.]
	p[Additionally, it also generates the =>[http://www.h3rald.com/glyph/|Glyph project page] from the book's introduction (note the usage of a raw custom layout macro).]
]
