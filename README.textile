Glyph is a _Rapid Document Authoring Framework_. 

With Glyph, creating and maintaining any kind of document -- be it a short article or a long book -- becomes as easy as... _programming_. Glyph enables you to minimize text duplication, focus on content rather than presentation, manage references seamlessly and automate tedious tasks through a simple but effective macro language, specifically geared towards customization and extensibility.
	<div class="section">
<h2 id="h_1">What's wrong with Word Processors?</h2>
Depends on the particular software. Common shortcomings include:
* Lack of proper content reuse capabilities
* Inadequate and often even counter-productive WYSIWYG user interface
* Lack of tools for managing and validating links and references
* Mainly focused on one or a few similar output formats, normally tied to the very same layout

</div>
	<div class="section">
<h2 id="h_2">What's wrong with LaTeX?</h2>
LaTeX is _the_ tool that anyone should be using to produce high-quality publications. Glyph does not aim to be a LaTeX replacement, but there is a certain overlap of functionality. 

LaTeX is a typesetting system, while Glyph is a document authoring tool. Arguably, Glyph could be simpler to learn and use, and require less software prerequisites and configurations. Looking at the type of documents that can be produced by both, it is safe to say that Glyph documents are normally _good enough_ for most needs and they can be written with less effort on the writer's part.

</div>
	<div class="section">
<h2 id="h_3">Main Features</h2>
<div class="section">
<h3 id="h_4">Command Line Interface</h3>
Glyph is 100% command line. Its interface resambles <a href="http://git-scm.com/">Git's</a> for its simplicity and power (thanks to the <a href="http://github.com/davetron5000/gli">gli</a> gem). Here are some example commands: 

* @glyph init@ -- to initialize a new Glyph project in the current (empty) directory.
* @glyph add introduction.textile@ -- to create a new file called _introduction.textile_.
* @glyph compile@ -- to compile the current document into a single HTML file.
* @glyph compile --auto@ -- to keep recompiling the current document every time a file is changed.
* @glyph compile -f pdf@ -- to compile the current document into HTML and then transform it into PDF.
* @glyph compile readme.glyph@ -- to compile a _readme.glyph_ located in the current directory into a single HTML file.
* @glyph outline -l 2@ -- Display the document outline, up to second-level headers.
* @glyph stats@ -- Display project statistics.

</div>
		<div class="section">
<h3 id="h_5">Minimalist Syntax</h3>
Glyph syntax rules can be explained using Glyph itself:
			
<div class="code">
<pre>
<code>
section[
  @title[Something about Glyph]
  txt[
You can use Glyph macros in conjunction 
with _Textile_ or _Markdown_ to
produce HTML files effortlessly.
  ]
  p[Alternatively, you can just use em[Glyph itself] to generate HTML tags.]
  section[
    @title[What about PDFs?]
    @id[pdf]
		p[
Once you have a single, well-formatted HTML 
file, converting it to PDF is
extremely easy with a free 3rd-party 
renderer like =>[http://www.princexml.com|Prince] 
or =>[http://code.google.com/p/wkhtmltopdf/|wkhtmltopdf].
		]
  ]   
]
</code>
</pre>
</div>
The Glyph code above corresponds to the following HTML code:
				
<div class="code">
<pre>
<code>
<div class="section">
  <h2 id="h_10">Something about Glyph</h2>
  <p>
    You can use Glyph macros in conjunction with 
    <em>Textile</em> or <em>Markdown</em> to
    produce HTML files effortlessly.
  </p>
  <p>
    Alternatively, you can just use <em>Glyph itself</em>
    to generate HTML tags.
  </p>
  <div class="section">
   <h3 id="pdf">What about PDFs?</h3>
   <p>
     Once you have a single, well-formatted HTML 
     file, converting it to PDF is
     extremely easy with a free 3rd-party renderer 
     like <a href="http://www.princexml.com">Prince</a> 
			or <a href="http://code.google.com/p/wkhtmltopdf/\">wkhtmltopdf</a>.
   </p>
  </div>
</div>
</code>
</pre>
</div>

</div>
		<div class="section">
<h3 id="h_6">Content Reuse</h3>
Finding yourself repeating the same sentence over an over? Glyph allows you to create snippets. Within snippets. Within other snippets (and so on, for a long long time...) as long as you don't define a snippet by defining itself, which would be kinda nasty (and Glyph would complain!):
			
<div class="code">
<pre>
<code>
snippet:[entities|snippets and macros]
snippet:[custom_definitions|p[Glyph allows you to define your own &[entities].]]
		&[custom_definitions]
</code>
</pre>
</div>
		...which results in:
			
<div class="code">
<pre>
<code>
<p>Glyph allows you to define your own snippets and macros.</p>
</code>
</pre>
</div>
		If yourself dreaming about _parametric_ snippets, just create your own macros (see the <a href="http://github.com/h3rald/glyph/blob/master/book/text/changelog.glyph">source</a> of Glyph's changelog, just to have an idea).

</div>
		<div class="section">
<h3 id="h_7">Automation of Common Tasks</h3>
If you're writing a book, you shouldn't have to worry about pagination, headers, footers, table of contents, section numbering or similar. Glyph understands you, and will take care of everything for you (with a little help from CSS3, sometimes).

</div>
		<div class="section">
<h3 id="h_8">Reference Validation</h3>
Feel free to add plenty of links, snippets, bookmarks, ... if Glyph doesn't find something, it will definitely complain. Broken references are a thing on the past, and you don't need to worry about it.

</div>
		<div class="section">
<h3 id="h_9">Extreme Extensibility</h3>
* You miss a <code>!!!</code> macro to format really, _really_ important things? Create it. In under 3 seconds, in Ruby or Glyph itself. And yes, you can use special characters, too.
* You want your own, very special special @glyph create --everything@ command to create all _you_ need in a Glyph project? You can do it. Using your own Rake tasks, too.
* You want Glyph to output ODF files? You can do it, and you'll be able to run @glyph generate -f odf@. This would probably require a little more time, but it's trivial, from a technical point of view.

</div>
		<div class="section">
<h3 id="h_10">Convention over Configuration</h3>
Put your text files in @/text@, your images in @/images@, add custom macros in a @macro@ folder within your @/lib@ folder... you get the picture: Glyph has its special places.

Nonetheless, you also have 1 (_one_) configuration file to customize to your heart's content (with smart defaults).

</div>	
		<div class="section">
<h3 id="h_11">Free and Open Source</h3>
Glyph is 100% Open Source Software, developed using the Ruby Programming Language and licensed under the very permissive terms of the <a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a>.

If you have Ruby installed, just run @gem install glyph@. That's all it takes.

</div>

</div>
	<div class="section">
<h2 id="h_12">Resources</h2>
* Home Page: <a href="http://www.h3rald.com/glyph/">http://www.h3rald.com/glyph/</a>
* Repository: <a href="http://www.github.com/h3rald/glyph/">http://www.github.com/h3rald/glyph/</a>
* Bug Tracking: <a href="http://www.github.com/h3rald/glyph/issues">http://www.github.com/h3rald/glyph/issues</a>
* Development Wiki <a href="http://wiki.github.com/h3rald/glyph">http://wiki.github.com/h3rald/glyph</a>
* RubyGem Download <a href="http://www.rubygems.org/gems/glyph">http://www.rubygems.org/gems/glyph</a>
* Book (PDF): <a href="http://github.com/downloads/h3rald/glyph/glyph.pdf">http://github.com/downloads/h3rald/glyph/glyph.pdf</a>
* Reference Documentation: <a href="http://yardoc.org/docs/h3rald-glyph/">http://yardoc.org/docs/h3rald-glyph/</a>
* User Group: <a href="http://groups.google.com/group/glyph-framework">http://groups.google.com/group/glyph-framework</a>

</div>